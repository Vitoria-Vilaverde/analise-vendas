# Importação das bibliotecas
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from statsmodels.tsa.arima.model import ARIMA
import xgboost as xgb

# Configuração inicial
sns.set_style("whitegrid")

# Carregar dataset simulado
def carregar_dados(caminho):
    df = pd.read_csv(caminho)
    return df

# Caminho do dataset
DATASET_PATH = "data/sales_data.csv"
df = carregar_dados(DATASET_PATH)

# Visualização inicial dos dados
df.head()

# Estatísticas básicas
df.describe()

# Gráfico de tendências de vendas
plt.figure(figsize=(12,6))
sns.lineplot(x='date', y='sales', data=df, marker='o', color='b')
plt.xticks(rotation=45)
plt.title('Tendência de Vendas ao Longo do Tempo')
plt.show()

# Preparação dos dados para modelagem
X = df[['store_id', 'product_id', 'price', 'promo', 'day_of_week', 'month']]
y = df['sales']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Treinamento do modelo Random Forest
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_pred = rf_model.predict(X_test)

# Treinamento do modelo XGBoost
xgb_model = xgb.XGBRegressor(objective='reg:squarederror', n_estimators=100, random_state=42)
xgb_model.fit(X_train, y_train)
xgb_pred = xgb_model.predict(X_test)

# Treinamento do modelo ARIMA (baseado na série temporal de vendas)
serie_vendas = df[['date', 'sales']].set_index('date').resample('M').sum()
modelo_arima = ARIMA(serie_vendas, order=(5,1,0))
modelo_ajustado = modelo_arima.fit()
arima_pred = modelo_ajustado.forecast(steps=len(X_test))

# Avaliação dos modelos
rf_mae = mean_absolute_error(y_test, rf_pred)
rf_mse = mean_squared_error(y_test, rf_pred)
rf_r2 = r2_score(y_test, rf_pred)

xgb_mae = mean_absolute_error(y_test, xgb_pred)
xgb_mse = mean_squared_error(y_test, xgb_pred)
xgb_r2 = r2_score(y_test, xgb_pred)

print(f"Random Forest - MAE: {rf_mae}, MSE: {rf_mse}, R²: {rf_r2}")
print(f"XGBoost - MAE: {xgb_mae}, MSE: {xgb_mse}, R²: {xgb_r2}")
print(f"ARIMA - Previsão dos próximos meses:\n{arima_pred}")

# Salvando previsões
df_pred = pd.DataFrame({'Actual': y_test, 'RF_Predicted': rf_pred, 'XGB_Predicted': xgb_pred})
df_pred.to_csv("data/sales_predictions.csv", index=False)

print("Previsões concluídas! Dados salvos em 'data/sales_predictions.csv'")
